pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_CUSTOMERS', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'BRANCH_VISITS', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'BRANCH_VETS', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'BRANCH_GENAI', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'BRANCH_ADMIN', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'BRANCH_CONFIG', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'BRANCH_GATEWAY', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'BRANCH_DISCOVERY', defaultValue: 'main', description: 'Branch for discovery-server')
    }

    environment {
        DOCKERHUB_USERNAME = credentials('dockerhub-credentials').usr
        HELM_RELEASE_NAME = "petclinic"
        NAMESPACE = "default"
    }

    stages {
        stage('Generate Image Tags') {
            steps {
                script {
                    def services = [
                        'customers-service': params.BRANCH_CUSTOMERS,
                        'visits-service': params.BRANCH_VISITS,
                        'vets-service': params.BRANCH_VETS,
                        'genai-service': params.BRANCH_GENAI,
                        'admin-server': params.BRANCH_ADMIN,
                        'config-server': params.BRANCH_CONFIG,
                        'api-gateway': params.BRANCH_GATEWAY,
                        'discovery-server': params.BRANCH_DISCOVERY
                    ]

                    IMAGE_TAGS = [:]

                    services.each { service, branch ->
                        if (branch == 'main') {
                            IMAGE_TAGS[service] = "main"
                        } else {
                            // Fetch commit ID from remote branch
                            def commit = sh(
                                script: "git ls-remote origin refs/heads/${branch} | cut -c1-7",
                                returnStdout: true
                            ).trim()

                            if (!commit) {
                                error "‚ùå Kh√¥ng t√¨m th·∫•y branch ${branch} cho service ${service}"
                            }

                            IMAGE_TAGS[service] = commit
                        }
                    }

                    echo "üì¶ Image tags s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng:"
                    IMAGE_TAGS.each { k, v -> echo " - ${k}: ${v}" }
                }
            }
        }

        stage('Deploy via Helm') {
            steps {
                script {
                    def helmValues = IMAGE_TAGS.collect { service, tag ->
                        def key = service.replace('-service', '').replace('-', '')
                        "services[?(@.name==\"${service}\")].image=${DOCKERHUB_USERNAME}/spring-petclinic-${service}:${tag}"
                    }.join(',')

                    echo "üöÄ Deploying with Helm values override..."

                    sh """
                    helm upgrade --install ${HELM_RELEASE_NAME} ./helm-chart \
                      --namespace ${NAMESPACE} \
                      --set-string ${helmValues}
                    """
                }
            }
        }

        stage('Show Access Info') {
            steps {
                script {
                    echo "üîó Sau khi deploy, truy c·∫≠p t·∫°i: http://<WORKER_NODE_IP>:30080"
                    echo "‚ö†Ô∏è H√£y th√™m domain th·ªß c√¥ng trong file /etc/hosts n·∫øu c·∫ßn."
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CD Pipeline ho√†n t·∫•t."
        }
        failure {
            echo "‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh CD."
        }
    }
}
