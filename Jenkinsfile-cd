pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_CUSTOMERS', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'BRANCH_VISITS', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'BRANCH_VETS', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'BRANCH_GENAI', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'BRANCH_ADMIN', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'BRANCH_CONFIG', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'BRANCH_GATEWAY', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'BRANCH_DISCOVERY', defaultValue: 'main', description: 'Branch for discovery-server')
    }

    environment {
        DOCKERHUB_USERNAME = "matoupine"
        GITOPS_REPO = "https://github.com/matoupine/spring-petclinic-microservices-cd.git"
        GITOPS_BRANCH = "main"
        GIT_CREDENTIALS_ID = "git-credentials"
    }

    stages {
        stage('Detect Environment') {
            steps {
                script {
                    // Auto-detect environment
                    def gitTag = sh(script: "git describe --tags --exact-match || true", returnStdout: true).trim()
                    echo "üîç Git Tag: ${gitTag}"

                    if (gitTag ==~ /v\d+\.\d+\.\d+/) {
                        env.ENVIRONMENT = 'staging'
                        echo "üöÄ Detected release tag '${gitTag}' ‚Äî deploying to STAGING"
                        env.IMAGE_TAG_SUFFIX = gitTag
                    } else {
                        env.ENVIRONMENT = 'dev'
                        echo "üõ† No release tag found ‚Äî deploying to DEV"
                        env.IMAGE_TAG_SUFFIX = "latest"
                    }
                }
            }
        }

        stage('Generate Image Tags') {
            steps {
                script {
                    def services = [
                        'customers-service': params.BRANCH_CUSTOMERS,
                        'visits-service': params.BRANCH_VISITS,
                        'vets-service': params.BRANCH_VETS,
                        'genai-service': params.BRANCH_GENAI,
                        'admin-server': params.BRANCH_ADMIN,
                        'config-server': params.BRANCH_CONFIG,
                        'api-gateway': params.BRANCH_GATEWAY,
                        'discovery-server': params.BRANCH_DISCOVERY
                    ]

                    IMAGE_TAGS = [:]

                    services.each { service, branch ->
                        def tag = env.IMAGE_TAG_SUFFIX == 'latest' ?
                            sh(script: "git ls-remote ${GITOPS_REPO} refs/heads/${branch} | cut -c1-7", returnStdout: true).trim() :
                            env.IMAGE_TAG_SUFFIX

                        if (!tag) {
                            error "‚ùå Cannot find valid tag/commit for '${service}'"
                        }

                        IMAGE_TAGS[service] = tag
                    }

                    echo "üì¶ Image tags to be used:"
                    IMAGE_TAGS.each { k, v -> echo " - ${k}: ${v}" }
                }
            }
        }

        stage('Update GitOps Repository') {
            steps {
                script {
                    sh "rm -rf gitops"
                    sh "git clone ${GITOPS_REPO} gitops"

                    def valuesPath = "overlays/${env.ENVIRONMENT}/values-${env.ENVIRONMENT}.yaml"
                    def fullValuesPath = "gitops/${valuesPath}"
                    def overlaysDir = "gitops/overlays/${env.ENVIRONMENT}"
                    sh "mkdir -p ${overlaysDir}"

                    def valuesContent = """# PetClinic values for ${env.ENVIRONMENT} environment
services:
"""
                    IMAGE_TAGS.each { service, tag ->
                        def port = service == 'customers-service' ? 8081 :
                                  service == 'visits-service' ? 8084 :
                                  service == 'vets-service' ? 8083 :
                                  service == 'genai-service' ? 8082 :
                                  service == 'admin-server' ? 9100 :
                                  service == 'config-server' ? 8888 :
                                  service == 'api-gateway' ? 8080 :
                                  service == 'discovery-server' ? 8761 : 8080
                        valuesContent += """  - name: ${service}
    image: ${DOCKERHUB_USERNAME}/spring-petclinic-${service}:${tag}
    port: ${port}
"""
                    }

                    valuesContent += """
service:
  type: NodePort
  nodePort: 30080

serviceAccount:
  create: true
  name: ""

ingress:
  enabled: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
"""

                    writeFile file: fullValuesPath, text: valuesContent

                    dir('gitops') {
                        withCredentials([usernamePassword(credentialsId: GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            def safeRepo = GITOPS_REPO.replace("https://", "https://${GIT_USERNAME}:${GIT_PASSWORD}@")
                            sh """
                                git config user.email "imanhhuy007@gmail.com"
                                git config user.name "anhhuy007"
                                git add ${valuesPath}
                                git diff --cached --quiet || git commit -m "Update ${env.ENVIRONMENT} with new image tags: ${env.IMAGE_TAG_SUFFIX}"
                                git push ${safeRepo} ${GITOPS_BRANCH}
                            """
                        }
                    }
                }
            }
        }

        stage('Show Access Info') {
            steps {
                script {
                    echo "üîó Access app at: http://<WORKER_NODE_IP>:30080"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CD Pipeline completed. ArgoCD is synced."
        }
        failure {
            echo "‚ùå CD process failed."
        }
    }
}
