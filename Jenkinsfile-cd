pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_CUSTOMERS', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'BRANCH_VISITS', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'BRANCH_VETS', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'BRANCH_GENAI', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'BRANCH_ADMIN', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'BRANCH_CONFIG', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'BRANCH_GATEWAY', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'BRANCH_DISCOVERY', defaultValue: 'main', description: 'Branch for discovery-server')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Environment to deploy to (dev or staging)')
    }

    environment {
        DOCKERHUB_USERNAME = "matoupine"
        GITOPS_REPO = "https://github.com/matoupine/spring-petclinic-microservices-cd.git"
        GITOPS_BRANCH = "main"
    }

    stages {
        stage('Generate Image Tags') {
            steps {
                script {
                    def services = [
                        'customers-service': params.BRANCH_CUSTOMERS,
                        'visits-service': params.BRANCH_VISITS,
                        'vets-service': params.BRANCH_VETS,
                        'genai-service': params.BRANCH_GENAI,
                        'admin-server': params.BRANCH_ADMIN,
                        'config-server': params.BRANCH_CONFIG,
                        'api-gateway': params.BRANCH_GATEWAY,
                        'discovery-server': params.BRANCH_DISCOVERY
                    ]

                    IMAGE_TAGS = [:]

                    services.each { service, branch ->
                        if (branch == 'main') {
                            IMAGE_TAGS[service] = "main"
                        } else {
                            // Fetch commit ID from remote branch
                            def commit = sh(
                                script: "git ls-remote origin refs/heads/${branch} | cut -c1-7",
                                returnStdout: true
                            ).trim()

                            if (!commit) {
                                error "‚ùå Kh√¥ng t√¨m th·∫•y branch ${branch} cho service ${service}"
                            }

                            IMAGE_TAGS[service] = commit
                        }
                    }

                    echo "üì¶ Image tags will be used:"
                    IMAGE_TAGS.each { k, v -> echo " - ${k}: ${v}" }
                }
            }
        }

        stage('Update GitOps Repository') {
            steps {
                script {
                    // Clone the GitOps repository
                    sh "rm -rf gitops-repo"
                    sh "git clone ${GITOPS_REPO} gitops-repo"

                    // Build updated YAML values
                    def valuesPath = "gitops-repo/overlays/${params.ENVIRONMENT}/values-${params.ENVIRONMENT}.yaml"

                    def valuesContent = """
replicaCount: 1

services:
"""

                    IMAGE_TAGS.each { service, tag ->
                        valuesContent += """  - name: ${service}
    image: ${DOCKERHUB_USERNAME}/spring-petclinic-${service}:${tag}
"""
                    }

                    valuesContent += """
service:
  type: NodePort
  nodePort: 30080
"""

                    // Echo the generated values content for debugging
                    echo "üìÑ Generated values content:"
                    echo valuesContent

                    writeFile file: valuesPath, text: valuesContent

                    // Commit and push the changes
                    dir('gitops-repo') {
                        withCredentials([githubApp(credentialsId: 'jenkins-petclinic-cd', idVariable: 'GITHUB_CREDENTIALS')]) {
                            // You don't need to manually handle username/password
                            // GitHub App token will be used for authentication
                            sh """
                                git config --global user.email "imanhhuy007@gmail.com"
                                git config --global user.name "anhhuy007"
                                git add .
                                git commit -m "Update ${params.ENVIRONMENT} environment with new image tags"
                                git push https://x-access-token:${GITHUB_CREDENTIALS}@github.com/${GITOPS_REPO.replace('https://', '')} ${GITOPS_BRANCH}
                            """
                        }
                    }
                }
            }
        }

        stage('Show Access Info') {
            steps {
                script {
                    echo "üîó After deployment, access at: http://<WORKER_NODE_IP>:30080"
                    echo "‚ö†Ô∏è Please add domain manually in /etc/hosts if needed."
                    echo "üîÑ ArgoCD will automatically sync and deploy the changes."
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CD Pipeline completed. ArgoCD has been updated."
        }
        failure {
            echo "‚ùå There was an error in the CD process."
        }
    }
}
